/*      */ package javazoom.jl.decoder;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ class LayerIIDecoder
/*      */   extends LayerIDecoder
/*      */   implements FrameDecoder
/*      */ {
/*      */   protected void createSubbands() {
/*   46 */     if (this.mode == 3) {
/*   47 */       for (int i = 0; i < this.num_subbands; i++)
/*   48 */         this.subbands[i] = new SubbandLayer2(i); 
/*   49 */     } else if (this.mode == 1) {
/*      */       int i;
/*   51 */       for (i = 0; i < this.header.intensity_stereo_bound(); i++)
/*   52 */         this.subbands[i] = new SubbandLayer2Stereo(i); 
/*   53 */       for (; i < this.num_subbands; i++) {
/*   54 */         this.subbands[i] = new SubbandLayer2IntensityStereo(i);
/*      */       }
/*      */     } else {
/*      */       
/*   58 */       for (int i = 0; i < this.num_subbands; i++) {
/*   59 */         this.subbands[i] = new SubbandLayer2Stereo(i);
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   protected void readScaleFactorSelection() {
/*   66 */     for (int i = 0; i < this.num_subbands; i++) {
/*   67 */       ((SubbandLayer2)this.subbands[i]).read_scalefactor_selection(this.stream, this.crc);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class SubbandLayer2
/*      */     extends LayerIDecoder.Subband
/*      */   {
/*   80 */     public static final float[] grouping_5bits = new float[] { 
/*   81 */         -0.6666667F, -0.6666667F, -0.6666667F, 
/*   82 */         0.0F, -0.6666667F, -0.6666667F, 
/*   83 */         0.6666667F, -0.6666667F, -0.6666667F, 
/*   84 */         -0.6666667F, 0.0F, -0.6666667F, 
/*   85 */         0.0F, 0.0F, -0.6666667F, 
/*   86 */         0.6666667F, 0.0F, -0.6666667F, 
/*   87 */         -0.6666667F, 0.6666667F, -0.6666667F, 
/*   88 */         0.0F, 0.6666667F, -0.6666667F, 
/*   89 */         0.6666667F, 0.6666667F, -0.6666667F, 
/*   90 */         -0.6666667F, -0.6666667F, 0.0F, 
/*   91 */         0.0F, -0.6666667F, 0.0F, 
/*   92 */         0.6666667F, -0.6666667F, 0.0F, 
/*   93 */         -0.6666667F, 0.0F, 0.0F, 
/*   94 */         0.0F, 0.0F, 0.0F, 
/*   95 */         0.6666667F, 0.0F, 0.0F, 
/*   96 */         -0.6666667F, 0.6666667F, 0.0F, 
/*   97 */         0.0F, 0.6666667F, 0.0F, 
/*   98 */         0.6666667F, 0.6666667F, 0.0F, 
/*   99 */         -0.6666667F, -0.6666667F, 0.6666667F, 
/*  100 */         0.0F, -0.6666667F, 0.6666667F, 
/*  101 */         0.6666667F, -0.6666667F, 0.6666667F, 
/*  102 */         -0.6666667F, 0.0F, 0.6666667F, 
/*  103 */         0.0F, 0.0F, 0.6666667F, 
/*  104 */         0.6666667F, 0.0F, 0.6666667F, 
/*  105 */         -0.6666667F, 0.6666667F, 0.6666667F, 
/*  106 */         0.0F, 0.6666667F, 0.6666667F, 
/*  107 */         0.6666667F, 0.6666667F, 0.6666667F };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  113 */     public static final float[] grouping_7bits = new float[] { 
/*  114 */         -0.8F, -0.8F, -0.8F, -0.4F, -0.8F, -0.8F, 0.0F, -0.8F, -0.8F, 0.4F, -0.8F, -0.8F, 0.8F, -0.8F, -0.8F, 
/*  115 */         -0.8F, -0.4F, -0.8F, -0.4F, -0.4F, -0.8F, 0.0F, -0.4F, -0.8F, 0.4F, -0.4F, -0.8F, 0.8F, -0.4F, -0.8F, 
/*  116 */         -0.8F, 0.0F, -0.8F, -0.4F, 0.0F, -0.8F, 0.0F, 0.0F, -0.8F, 0.4F, 0.0F, -0.8F, 0.8F, 0.0F, -0.8F, 
/*  117 */         -0.8F, 0.4F, -0.8F, -0.4F, 0.4F, -0.8F, 0.0F, 0.4F, -0.8F, 0.4F, 0.4F, -0.8F, 0.8F, 0.4F, -0.8F, 
/*  118 */         -0.8F, 0.8F, -0.8F, -0.4F, 0.8F, -0.8F, 0.0F, 0.8F, -0.8F, 0.4F, 0.8F, -0.8F, 0.8F, 0.8F, -0.8F, 
/*  119 */         -0.8F, -0.8F, -0.4F, -0.4F, -0.8F, -0.4F, 0.0F, -0.8F, -0.4F, 0.4F, -0.8F, -0.4F, 0.8F, -0.8F, -0.4F, 
/*  120 */         -0.8F, -0.4F, -0.4F, -0.4F, -0.4F, -0.4F, 0.0F, -0.4F, -0.4F, 0.4F, -0.4F, -0.4F, 0.8F, -0.4F, -0.4F, 
/*  121 */         -0.8F, 0.0F, -0.4F, -0.4F, 0.0F, -0.4F, 0.0F, 0.0F, -0.4F, 0.4F, 0.0F, -0.4F, 0.8F, 0.0F, -0.4F, 
/*  122 */         -0.8F, 0.4F, -0.4F, -0.4F, 0.4F, -0.4F, 0.0F, 0.4F, -0.4F, 0.4F, 0.4F, -0.4F, 0.8F, 0.4F, -0.4F, 
/*  123 */         -0.8F, 0.8F, -0.4F, -0.4F, 0.8F, -0.4F, 0.0F, 0.8F, -0.4F, 0.4F, 0.8F, -0.4F, 0.8F, 0.8F, -0.4F, 
/*  124 */         -0.8F, -0.8F, 0.0F, -0.4F, -0.8F, 0.0F, 0.0F, -0.8F, 0.0F, 0.4F, -0.8F, 0.0F, 0.8F, -0.8F, 0.0F, 
/*  125 */         -0.8F, -0.4F, 0.0F, -0.4F, -0.4F, 0.0F, 0.0F, -0.4F, 0.0F, 0.4F, -0.4F, 0.0F, 0.8F, -0.4F, 0.0F, 
/*  126 */         -0.8F, 0.0F, 0.0F, -0.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.4F, 0.0F, 0.0F, 0.8F, 0.0F, 0.0F, 
/*  127 */         -0.8F, 0.4F, 0.0F, -0.4F, 0.4F, 0.0F, 0.0F, 0.4F, 0.0F, 0.4F, 0.4F, 0.0F, 0.8F, 0.4F, 0.0F, 
/*  128 */         -0.8F, 0.8F, 0.0F, -0.4F, 0.8F, 0.0F, 0.0F, 0.8F, 0.0F, 0.4F, 0.8F, 0.0F, 0.8F, 0.8F, 0.0F, 
/*  129 */         -0.8F, -0.8F, 0.4F, -0.4F, -0.8F, 0.4F, 0.0F, -0.8F, 0.4F, 0.4F, -0.8F, 0.4F, 0.8F, -0.8F, 0.4F, 
/*  130 */         -0.8F, -0.4F, 0.4F, -0.4F, -0.4F, 0.4F, 0.0F, -0.4F, 0.4F, 0.4F, -0.4F, 0.4F, 0.8F, -0.4F, 0.4F, 
/*  131 */         -0.8F, 0.0F, 0.4F, -0.4F, 0.0F, 0.4F, 0.0F, 0.0F, 0.4F, 0.4F, 0.0F, 0.4F, 0.8F, 0.0F, 0.4F, 
/*  132 */         -0.8F, 0.4F, 0.4F, -0.4F, 0.4F, 0.4F, 0.0F, 0.4F, 0.4F, 0.4F, 0.4F, 0.4F, 0.8F, 0.4F, 0.4F, 
/*  133 */         -0.8F, 0.8F, 0.4F, -0.4F, 0.8F, 0.4F, 0.0F, 0.8F, 0.4F, 0.4F, 0.8F, 0.4F, 0.8F, 0.8F, 0.4F, 
/*  134 */         -0.8F, -0.8F, 0.8F, -0.4F, -0.8F, 0.8F, 0.0F, -0.8F, 0.8F, 0.4F, -0.8F, 0.8F, 0.8F, -0.8F, 0.8F, 
/*  135 */         -0.8F, -0.4F, 0.8F, -0.4F, -0.4F, 0.8F, 0.0F, -0.4F, 0.8F, 0.4F, -0.4F, 0.8F, 0.8F, -0.4F, 0.8F, 
/*  136 */         -0.8F, 0.0F, 0.8F, -0.4F, 0.0F, 0.8F, 0.0F, 0.0F, 0.8F, 0.4F, 0.0F, 0.8F, 0.8F, 0.0F, 0.8F, 
/*  137 */         -0.8F, 0.4F, 0.8F, -0.4F, 0.4F, 0.8F, 0.0F, 0.4F, 0.8F, 0.4F, 0.4F, 0.8F, 0.8F, 0.4F, 0.8F, 
/*  138 */         -0.8F, 0.8F, 0.8F, -0.4F, 0.8F, 0.8F, 0.0F, 0.8F, 0.8F, 0.4F, 0.8F, 0.8F, 0.8F, 0.8F, 0.8F };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  144 */     public static final float[] grouping_10bits = new float[] { 
/*  145 */         -0.8888889F, -0.8888889F, -0.8888889F, -0.6666667F, -0.8888889F, -0.8888889F, -0.44444445F, -0.8888889F, -0.8888889F, 
/*  146 */         -0.22222222F, -0.8888889F, -0.8888889F, 0.0F, -0.8888889F, -0.8888889F, 0.22222222F, -0.8888889F, -0.8888889F, 
/*  147 */         0.44444445F, -0.8888889F, -0.8888889F, 0.6666667F, -0.8888889F, -0.8888889F, 0.8888889F, -0.8888889F, -0.8888889F, 
/*  148 */         -0.8888889F, -0.6666667F, -0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, 
/*  149 */         -0.22222222F, -0.6666667F, -0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 
/*  150 */         0.44444445F, -0.6666667F, -0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, 
/*  151 */         -0.8888889F, -0.44444445F, -0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, 
/*  152 */         -0.22222222F, -0.44444445F, -0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 
/*  153 */         0.44444445F, -0.44444445F, -0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, 
/*  154 */         -0.8888889F, -0.22222222F, -0.8888889F, -0.6666667F, -0.22222222F, -0.8888889F, -0.44444445F, -0.22222222F, -0.8888889F, 
/*  155 */         -0.22222222F, -0.22222222F, -0.8888889F, 0.0F, -0.22222222F, -0.8888889F, 0.22222222F, -0.22222222F, -0.8888889F, 
/*  156 */         0.44444445F, -0.22222222F, -0.8888889F, 0.6666667F, -0.22222222F, -0.8888889F, 0.8888889F, -0.22222222F, -0.8888889F, 
/*  157 */         -0.8888889F, 0.0F, -0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.44444445F, 0.0F, -0.8888889F, 
/*  158 */         -0.22222222F, 0.0F, -0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 
/*  159 */         0.44444445F, 0.0F, -0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.8888889F, 0.0F, -0.8888889F, 
/*  160 */         -0.8888889F, 0.22222222F, -0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, 
/*  161 */         -0.22222222F, 0.22222222F, -0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 
/*  162 */         0.44444445F, 0.22222222F, -0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, 
/*  163 */         -0.8888889F, 0.44444445F, -0.8888889F, -0.6666667F, 0.44444445F, -0.8888889F, -0.44444445F, 0.44444445F, -0.8888889F, 
/*  164 */         -0.22222222F, 0.44444445F, -0.8888889F, 0.0F, 0.44444445F, -0.8888889F, 0.22222222F, 0.44444445F, -0.8888889F, 
/*  165 */         0.44444445F, 0.44444445F, -0.8888889F, 0.6666667F, 0.44444445F, -0.8888889F, 0.8888889F, 0.44444445F, -0.8888889F, 
/*  166 */         -0.8888889F, 0.6666667F, -0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, 
/*  167 */         -0.22222222F, 0.6666667F, -0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 
/*  168 */         0.44444445F, 0.6666667F, -0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, 
/*  169 */         -0.8888889F, 0.8888889F, -0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, 
/*  170 */         -0.22222222F, 0.8888889F, -0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 
/*  171 */         0.44444445F, 0.8888889F, -0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.8888889F, 0.8888889F, -0.8888889F, 
/*  172 */         -0.8888889F, -0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.6666667F, 
/*  173 */         -0.22222222F, -0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.6666667F, 
/*  174 */         0.44444445F, -0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.6666667F, 
/*  175 */         -0.8888889F, -0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, -0.44444445F, -0.6666667F, -0.6666667F, 
/*  176 */         -0.22222222F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.22222222F, -0.6666667F, -0.6666667F, 
/*  177 */         0.44444445F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, 0.8888889F, -0.6666667F, -0.6666667F, 
/*  178 */         -0.8888889F, -0.44444445F, -0.6666667F, -0.6666667F, -0.44444445F, -0.6666667F, -0.44444445F, -0.44444445F, -0.6666667F, 
/*  179 */         -0.22222222F, -0.44444445F, -0.6666667F, 0.0F, -0.44444445F, -0.6666667F, 0.22222222F, -0.44444445F, -0.6666667F, 
/*  180 */         0.44444445F, -0.44444445F, -0.6666667F, 0.6666667F, -0.44444445F, -0.6666667F, 0.8888889F, -0.44444445F, -0.6666667F, 
/*  181 */         -0.8888889F, -0.22222222F, -0.6666667F, -0.6666667F, -0.22222222F, -0.6666667F, -0.44444445F, -0.22222222F, -0.6666667F, 
/*  182 */         -0.22222222F, -0.22222222F, -0.6666667F, 0.0F, -0.22222222F, -0.6666667F, 0.22222222F, -0.22222222F, -0.6666667F, 
/*  183 */         0.44444445F, -0.22222222F, -0.6666667F, 0.6666667F, -0.22222222F, -0.6666667F, 0.8888889F, -0.22222222F, -0.6666667F, 
/*  184 */         -0.8888889F, 0.0F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.44444445F, 0.0F, -0.6666667F, 
/*  185 */         -0.22222222F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.22222222F, 0.0F, -0.6666667F, 
/*  186 */         0.44444445F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.8888889F, 0.0F, -0.6666667F, 
/*  187 */         -0.8888889F, 0.22222222F, -0.6666667F, -0.6666667F, 0.22222222F, -0.6666667F, -0.44444445F, 0.22222222F, -0.6666667F, 
/*  188 */         -0.22222222F, 0.22222222F, -0.6666667F, 0.0F, 0.22222222F, -0.6666667F, 0.22222222F, 0.22222222F, -0.6666667F, 
/*  189 */         0.44444445F, 0.22222222F, -0.6666667F, 0.6666667F, 0.22222222F, -0.6666667F, 0.8888889F, 0.22222222F, -0.6666667F, 
/*  190 */         -0.8888889F, 0.44444445F, -0.6666667F, -0.6666667F, 0.44444445F, -0.6666667F, -0.44444445F, 0.44444445F, -0.6666667F, 
/*  191 */         -0.22222222F, 0.44444445F, -0.6666667F, 0.0F, 0.44444445F, -0.6666667F, 0.22222222F, 0.44444445F, -0.6666667F, 
/*  192 */         0.44444445F, 0.44444445F, -0.6666667F, 0.6666667F, 0.44444445F, -0.6666667F, 0.8888889F, 0.44444445F, -0.6666667F, 
/*  193 */         -0.8888889F, 0.6666667F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.44444445F, 0.6666667F, -0.6666667F, 
/*  194 */         -0.22222222F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.22222222F, 0.6666667F, -0.6666667F, 
/*  195 */         0.44444445F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.8888889F, 0.6666667F, -0.6666667F, 
/*  196 */         -0.8888889F, 0.8888889F, -0.6666667F, -0.6666667F, 0.8888889F, -0.6666667F, -0.44444445F, 0.8888889F, -0.6666667F, 
/*  197 */         -0.22222222F, 0.8888889F, -0.6666667F, 0.0F, 0.8888889F, -0.6666667F, 0.22222222F, 0.8888889F, -0.6666667F, 
/*  198 */         0.44444445F, 0.8888889F, -0.6666667F, 0.6666667F, 0.8888889F, -0.6666667F, 0.8888889F, 0.8888889F, -0.6666667F, 
/*  199 */         -0.8888889F, -0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, -0.44444445F, 
/*  200 */         -0.22222222F, -0.8888889F, -0.44444445F, 0.0F, -0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, -0.44444445F, 
/*  201 */         0.44444445F, -0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, -0.44444445F, 
/*  202 */         -0.8888889F, -0.6666667F, -0.44444445F, -0.6666667F, -0.6666667F, -0.44444445F, -0.44444445F, -0.6666667F, -0.44444445F, 
/*  203 */         -0.22222222F, -0.6666667F, -0.44444445F, 0.0F, -0.6666667F, -0.44444445F, 0.22222222F, -0.6666667F, -0.44444445F, 
/*  204 */         0.44444445F, -0.6666667F, -0.44444445F, 0.6666667F, -0.6666667F, -0.44444445F, 0.8888889F, -0.6666667F, -0.44444445F, 
/*  205 */         -0.8888889F, -0.44444445F, -0.44444445F, -0.6666667F, -0.44444445F, -0.44444445F, -0.44444445F, -0.44444445F, -0.44444445F, 
/*  206 */         -0.22222222F, -0.44444445F, -0.44444445F, 0.0F, -0.44444445F, -0.44444445F, 0.22222222F, -0.44444445F, -0.44444445F, 
/*  207 */         0.44444445F, -0.44444445F, -0.44444445F, 0.6666667F, -0.44444445F, -0.44444445F, 0.8888889F, -0.44444445F, -0.44444445F, 
/*  208 */         -0.8888889F, -0.22222222F, -0.44444445F, -0.6666667F, -0.22222222F, -0.44444445F, -0.44444445F, -0.22222222F, -0.44444445F, 
/*  209 */         -0.22222222F, -0.22222222F, -0.44444445F, 0.0F, -0.22222222F, -0.44444445F, 0.22222222F, -0.22222222F, -0.44444445F, 
/*  210 */         0.44444445F, -0.22222222F, -0.44444445F, 0.6666667F, -0.22222222F, -0.44444445F, 0.8888889F, -0.22222222F, -0.44444445F, 
/*  211 */         -0.8888889F, 0.0F, -0.44444445F, -0.6666667F, 0.0F, -0.44444445F, -0.44444445F, 0.0F, -0.44444445F, 
/*  212 */         -0.22222222F, 0.0F, -0.44444445F, 0.0F, 0.0F, -0.44444445F, 0.22222222F, 0.0F, -0.44444445F, 
/*  213 */         0.44444445F, 0.0F, -0.44444445F, 0.6666667F, 0.0F, -0.44444445F, 0.8888889F, 0.0F, -0.44444445F, 
/*  214 */         -0.8888889F, 0.22222222F, -0.44444445F, -0.6666667F, 0.22222222F, -0.44444445F, -0.44444445F, 0.22222222F, -0.44444445F, 
/*  215 */         -0.22222222F, 0.22222222F, -0.44444445F, 0.0F, 0.22222222F, -0.44444445F, 0.22222222F, 0.22222222F, -0.44444445F, 
/*  216 */         0.44444445F, 0.22222222F, -0.44444445F, 0.6666667F, 0.22222222F, -0.44444445F, 0.8888889F, 0.22222222F, -0.44444445F, 
/*  217 */         -0.8888889F, 0.44444445F, -0.44444445F, -0.6666667F, 0.44444445F, -0.44444445F, -0.44444445F, 0.44444445F, -0.44444445F, 
/*  218 */         -0.22222222F, 0.44444445F, -0.44444445F, 0.0F, 0.44444445F, -0.44444445F, 0.22222222F, 0.44444445F, -0.44444445F, 
/*  219 */         0.44444445F, 0.44444445F, -0.44444445F, 0.6666667F, 0.44444445F, -0.44444445F, 0.8888889F, 0.44444445F, -0.44444445F, 
/*  220 */         -0.8888889F, 0.6666667F, -0.44444445F, -0.6666667F, 0.6666667F, -0.44444445F, -0.44444445F, 0.6666667F, -0.44444445F, 
/*  221 */         -0.22222222F, 0.6666667F, -0.44444445F, 0.0F, 0.6666667F, -0.44444445F, 0.22222222F, 0.6666667F, -0.44444445F, 
/*  222 */         0.44444445F, 0.6666667F, -0.44444445F, 0.6666667F, 0.6666667F, -0.44444445F, 0.8888889F, 0.6666667F, -0.44444445F, 
/*  223 */         -0.8888889F, 0.8888889F, -0.44444445F, -0.6666667F, 0.8888889F, -0.44444445F, -0.44444445F, 0.8888889F, -0.44444445F, 
/*  224 */         -0.22222222F, 0.8888889F, -0.44444445F, 0.0F, 0.8888889F, -0.44444445F, 0.22222222F, 0.8888889F, -0.44444445F, 
/*  225 */         0.44444445F, 0.8888889F, -0.44444445F, 0.6666667F, 0.8888889F, -0.44444445F, 0.8888889F, 0.8888889F, -0.44444445F, 
/*  226 */         -0.8888889F, -0.8888889F, -0.22222222F, -0.6666667F, -0.8888889F, -0.22222222F, -0.44444445F, -0.8888889F, -0.22222222F, 
/*  227 */         -0.22222222F, -0.8888889F, -0.22222222F, 0.0F, -0.8888889F, -0.22222222F, 0.22222222F, -0.8888889F, -0.22222222F, 
/*  228 */         0.44444445F, -0.8888889F, -0.22222222F, 0.6666667F, -0.8888889F, -0.22222222F, 0.8888889F, -0.8888889F, -0.22222222F, 
/*  229 */         -0.8888889F, -0.6666667F, -0.22222222F, -0.6666667F, -0.6666667F, -0.22222222F, -0.44444445F, -0.6666667F, -0.22222222F, 
/*  230 */         -0.22222222F, -0.6666667F, -0.22222222F, 0.0F, -0.6666667F, -0.22222222F, 0.22222222F, -0.6666667F, -0.22222222F, 
/*  231 */         0.44444445F, -0.6666667F, -0.22222222F, 0.6666667F, -0.6666667F, -0.22222222F, 0.8888889F, -0.6666667F, -0.22222222F, 
/*  232 */         -0.8888889F, -0.44444445F, -0.22222222F, -0.6666667F, -0.44444445F, -0.22222222F, -0.44444445F, -0.44444445F, -0.22222222F, 
/*  233 */         -0.22222222F, -0.44444445F, -0.22222222F, 0.0F, -0.44444445F, -0.22222222F, 0.22222222F, -0.44444445F, -0.22222222F, 
/*  234 */         0.44444445F, -0.44444445F, -0.22222222F, 0.6666667F, -0.44444445F, -0.22222222F, 0.8888889F, -0.44444445F, -0.22222222F, 
/*  235 */         -0.8888889F, -0.22222222F, -0.22222222F, -0.6666667F, -0.22222222F, -0.22222222F, -0.44444445F, -0.22222222F, -0.22222222F, 
/*  236 */         -0.22222222F, -0.22222222F, -0.22222222F, 0.0F, -0.22222222F, -0.22222222F, 0.22222222F, -0.22222222F, -0.22222222F, 
/*  237 */         0.44444445F, -0.22222222F, -0.22222222F, 0.6666667F, -0.22222222F, -0.22222222F, 0.8888889F, -0.22222222F, -0.22222222F, 
/*  238 */         -0.8888889F, 0.0F, -0.22222222F, -0.6666667F, 0.0F, -0.22222222F, -0.44444445F, 0.0F, -0.22222222F, 
/*  239 */         -0.22222222F, 0.0F, -0.22222222F, 0.0F, 0.0F, -0.22222222F, 0.22222222F, 0.0F, -0.22222222F, 
/*  240 */         0.44444445F, 0.0F, -0.22222222F, 0.6666667F, 0.0F, -0.22222222F, 0.8888889F, 0.0F, -0.22222222F, 
/*  241 */         -0.8888889F, 0.22222222F, -0.22222222F, -0.6666667F, 0.22222222F, -0.22222222F, -0.44444445F, 0.22222222F, -0.22222222F, 
/*  242 */         -0.22222222F, 0.22222222F, -0.22222222F, 0.0F, 0.22222222F, -0.22222222F, 0.22222222F, 0.22222222F, -0.22222222F, 
/*  243 */         0.44444445F, 0.22222222F, -0.22222222F, 0.6666667F, 0.22222222F, -0.22222222F, 0.8888889F, 0.22222222F, -0.22222222F, 
/*  244 */         -0.8888889F, 0.44444445F, -0.22222222F, -0.6666667F, 0.44444445F, -0.22222222F, -0.44444445F, 0.44444445F, -0.22222222F, 
/*  245 */         -0.22222222F, 0.44444445F, -0.22222222F, 0.0F, 0.44444445F, -0.22222222F, 0.22222222F, 0.44444445F, -0.22222222F, 
/*  246 */         0.44444445F, 0.44444445F, -0.22222222F, 0.6666667F, 0.44444445F, -0.22222222F, 0.8888889F, 0.44444445F, -0.22222222F, 
/*  247 */         -0.8888889F, 0.6666667F, -0.22222222F, -0.6666667F, 0.6666667F, -0.22222222F, -0.44444445F, 0.6666667F, -0.22222222F, 
/*  248 */         -0.22222222F, 0.6666667F, -0.22222222F, 0.0F, 0.6666667F, -0.22222222F, 0.22222222F, 0.6666667F, -0.22222222F, 
/*  249 */         0.44444445F, 0.6666667F, -0.22222222F, 0.6666667F, 0.6666667F, -0.22222222F, 0.8888889F, 0.6666667F, -0.22222222F, 
/*  250 */         -0.8888889F, 0.8888889F, -0.22222222F, -0.6666667F, 0.8888889F, -0.22222222F, -0.44444445F, 0.8888889F, -0.22222222F, 
/*  251 */         -0.22222222F, 0.8888889F, -0.22222222F, 0.0F, 0.8888889F, -0.22222222F, 0.22222222F, 0.8888889F, -0.22222222F, 
/*  252 */         0.44444445F, 0.8888889F, -0.22222222F, 0.6666667F, 0.8888889F, -0.22222222F, 0.8888889F, 0.8888889F, -0.22222222F, 
/*  253 */         -0.8888889F, -0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.0F, 
/*  254 */         -0.22222222F, -0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.0F, 
/*  255 */         0.44444445F, -0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.0F, 
/*  256 */         -0.8888889F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.0F, -0.44444445F, -0.6666667F, 0.0F, 
/*  257 */         -0.22222222F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.22222222F, -0.6666667F, 0.0F, 
/*  258 */         0.44444445F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, 0.8888889F, -0.6666667F, 0.0F, 
/*  259 */         -0.8888889F, -0.44444445F, 0.0F, -0.6666667F, -0.44444445F, 0.0F, -0.44444445F, -0.44444445F, 0.0F, 
/*  260 */         -0.22222222F, -0.44444445F, 0.0F, 0.0F, -0.44444445F, 0.0F, 0.22222222F, -0.44444445F, 0.0F, 
/*  261 */         0.44444445F, -0.44444445F, 0.0F, 0.6666667F, -0.44444445F, 0.0F, 0.8888889F, -0.44444445F, 0.0F, 
/*  262 */         -0.8888889F, -0.22222222F, 0.0F, -0.6666667F, -0.22222222F, 0.0F, -0.44444445F, -0.22222222F, 0.0F, 
/*  263 */         -0.22222222F, -0.22222222F, 0.0F, 0.0F, -0.22222222F, 0.0F, 0.22222222F, -0.22222222F, 0.0F, 
/*  264 */         0.44444445F, -0.22222222F, 0.0F, 0.6666667F, -0.22222222F, 0.0F, 0.8888889F, -0.22222222F, 0.0F, 
/*  265 */         -0.8888889F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.44444445F, 0.0F, 0.0F, 
/*  266 */         -0.22222222F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.22222222F, 0.0F, 0.0F, 
/*  267 */         0.44444445F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.8888889F, 0.0F, 0.0F, 
/*  268 */         -0.8888889F, 0.22222222F, 0.0F, -0.6666667F, 0.22222222F, 0.0F, -0.44444445F, 0.22222222F, 0.0F, 
/*  269 */         -0.22222222F, 0.22222222F, 0.0F, 0.0F, 0.22222222F, 0.0F, 0.22222222F, 0.22222222F, 0.0F, 
/*  270 */         0.44444445F, 0.22222222F, 0.0F, 0.6666667F, 0.22222222F, 0.0F, 0.8888889F, 0.22222222F, 0.0F, 
/*  271 */         -0.8888889F, 0.44444445F, 0.0F, -0.6666667F, 0.44444445F, 0.0F, -0.44444445F, 0.44444445F, 0.0F, 
/*  272 */         -0.22222222F, 0.44444445F, 0.0F, 0.0F, 0.44444445F, 0.0F, 0.22222222F, 0.44444445F, 0.0F, 
/*  273 */         0.44444445F, 0.44444445F, 0.0F, 0.6666667F, 0.44444445F, 0.0F, 0.8888889F, 0.44444445F, 0.0F, 
/*  274 */         -0.8888889F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.44444445F, 0.6666667F, 0.0F, 
/*  275 */         -0.22222222F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.22222222F, 0.6666667F, 0.0F, 
/*  276 */         0.44444445F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.8888889F, 0.6666667F, 0.0F, 
/*  277 */         -0.8888889F, 0.8888889F, 0.0F, -0.6666667F, 0.8888889F, 0.0F, -0.44444445F, 0.8888889F, 0.0F, 
/*  278 */         -0.22222222F, 0.8888889F, 0.0F, 0.0F, 0.8888889F, 0.0F, 0.22222222F, 0.8888889F, 0.0F, 
/*  279 */         0.44444445F, 0.8888889F, 0.0F, 0.6666667F, 0.8888889F, 0.0F, 0.8888889F, 0.8888889F, 0.0F, 
/*  280 */         -0.8888889F, -0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 0.22222222F, 
/*  281 */         -0.22222222F, -0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 0.22222222F, 
/*  282 */         0.44444445F, -0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 0.22222222F, 
/*  283 */         -0.8888889F, -0.6666667F, 0.22222222F, -0.6666667F, -0.6666667F, 0.22222222F, -0.44444445F, -0.6666667F, 0.22222222F, 
/*  284 */         -0.22222222F, -0.6666667F, 0.22222222F, 0.0F, -0.6666667F, 0.22222222F, 0.22222222F, -0.6666667F, 0.22222222F, 
/*  285 */         0.44444445F, -0.6666667F, 0.22222222F, 0.6666667F, -0.6666667F, 0.22222222F, 0.8888889F, -0.6666667F, 0.22222222F, 
/*  286 */         -0.8888889F, -0.44444445F, 0.22222222F, -0.6666667F, -0.44444445F, 0.22222222F, -0.44444445F, -0.44444445F, 0.22222222F, 
/*  287 */         -0.22222222F, -0.44444445F, 0.22222222F, 0.0F, -0.44444445F, 0.22222222F, 0.22222222F, -0.44444445F, 0.22222222F, 
/*  288 */         0.44444445F, -0.44444445F, 0.22222222F, 0.6666667F, -0.44444445F, 0.22222222F, 0.8888889F, -0.44444445F, 0.22222222F, 
/*  289 */         -0.8888889F, -0.22222222F, 0.22222222F, -0.6666667F, -0.22222222F, 0.22222222F, -0.44444445F, -0.22222222F, 0.22222222F, 
/*  290 */         -0.22222222F, -0.22222222F, 0.22222222F, 0.0F, -0.22222222F, 0.22222222F, 0.22222222F, -0.22222222F, 0.22222222F, 
/*  291 */         0.44444445F, -0.22222222F, 0.22222222F, 0.6666667F, -0.22222222F, 0.22222222F, 0.8888889F, -0.22222222F, 0.22222222F, 
/*  292 */         -0.8888889F, 0.0F, 0.22222222F, -0.6666667F, 0.0F, 0.22222222F, -0.44444445F, 0.0F, 0.22222222F, 
/*  293 */         -0.22222222F, 0.0F, 0.22222222F, 0.0F, 0.0F, 0.22222222F, 0.22222222F, 0.0F, 0.22222222F, 
/*  294 */         0.44444445F, 0.0F, 0.22222222F, 0.6666667F, 0.0F, 0.22222222F, 0.8888889F, 0.0F, 0.22222222F, 
/*  295 */         -0.8888889F, 0.22222222F, 0.22222222F, -0.6666667F, 0.22222222F, 0.22222222F, -0.44444445F, 0.22222222F, 0.22222222F, 
/*  296 */         -0.22222222F, 0.22222222F, 0.22222222F, 0.0F, 0.22222222F, 0.22222222F, 0.22222222F, 0.22222222F, 0.22222222F, 
/*  297 */         0.44444445F, 0.22222222F, 0.22222222F, 0.6666667F, 0.22222222F, 0.22222222F, 0.8888889F, 0.22222222F, 0.22222222F, 
/*  298 */         -0.8888889F, 0.44444445F, 0.22222222F, -0.6666667F, 0.44444445F, 0.22222222F, -0.44444445F, 0.44444445F, 0.22222222F, 
/*  299 */         -0.22222222F, 0.44444445F, 0.22222222F, 0.0F, 0.44444445F, 0.22222222F, 0.22222222F, 0.44444445F, 0.22222222F, 
/*  300 */         0.44444445F, 0.44444445F, 0.22222222F, 0.6666667F, 0.44444445F, 0.22222222F, 0.8888889F, 0.44444445F, 0.22222222F, 
/*  301 */         -0.8888889F, 0.6666667F, 0.22222222F, -0.6666667F, 0.6666667F, 0.22222222F, -0.44444445F, 0.6666667F, 0.22222222F, 
/*  302 */         -0.22222222F, 0.6666667F, 0.22222222F, 0.0F, 0.6666667F, 0.22222222F, 0.22222222F, 0.6666667F, 0.22222222F, 
/*  303 */         0.44444445F, 0.6666667F, 0.22222222F, 0.6666667F, 0.6666667F, 0.22222222F, 0.8888889F, 0.6666667F, 0.22222222F, 
/*  304 */         -0.8888889F, 0.8888889F, 0.22222222F, -0.6666667F, 0.8888889F, 0.22222222F, -0.44444445F, 0.8888889F, 0.22222222F, 
/*  305 */         -0.22222222F, 0.8888889F, 0.22222222F, 0.0F, 0.8888889F, 0.22222222F, 0.22222222F, 0.8888889F, 0.22222222F, 
/*  306 */         0.44444445F, 0.8888889F, 0.22222222F, 0.6666667F, 0.8888889F, 0.22222222F, 0.8888889F, 0.8888889F, 0.22222222F, 
/*  307 */         -0.8888889F, -0.8888889F, 0.44444445F, -0.6666667F, -0.8888889F, 0.44444445F, -0.44444445F, -0.8888889F, 0.44444445F, 
/*  308 */         -0.22222222F, -0.8888889F, 0.44444445F, 0.0F, -0.8888889F, 0.44444445F, 0.22222222F, -0.8888889F, 0.44444445F, 
/*  309 */         0.44444445F, -0.8888889F, 0.44444445F, 0.6666667F, -0.8888889F, 0.44444445F, 0.8888889F, -0.8888889F, 0.44444445F, 
/*  310 */         -0.8888889F, -0.6666667F, 0.44444445F, -0.6666667F, -0.6666667F, 0.44444445F, -0.44444445F, -0.6666667F, 0.44444445F, 
/*  311 */         -0.22222222F, -0.6666667F, 0.44444445F, 0.0F, -0.6666667F, 0.44444445F, 0.22222222F, -0.6666667F, 0.44444445F, 
/*  312 */         0.44444445F, -0.6666667F, 0.44444445F, 0.6666667F, -0.6666667F, 0.44444445F, 0.8888889F, -0.6666667F, 0.44444445F, 
/*  313 */         -0.8888889F, -0.44444445F, 0.44444445F, -0.6666667F, -0.44444445F, 0.44444445F, -0.44444445F, -0.44444445F, 0.44444445F, 
/*  314 */         -0.22222222F, -0.44444445F, 0.44444445F, 0.0F, -0.44444445F, 0.44444445F, 0.22222222F, -0.44444445F, 0.44444445F, 
/*  315 */         0.44444445F, -0.44444445F, 0.44444445F, 0.6666667F, -0.44444445F, 0.44444445F, 0.8888889F, -0.44444445F, 0.44444445F, 
/*  316 */         -0.8888889F, -0.22222222F, 0.44444445F, -0.6666667F, -0.22222222F, 0.44444445F, -0.44444445F, -0.22222222F, 0.44444445F, 
/*  317 */         -0.22222222F, -0.22222222F, 0.44444445F, 0.0F, -0.22222222F, 0.44444445F, 0.22222222F, -0.22222222F, 0.44444445F, 
/*  318 */         0.44444445F, -0.22222222F, 0.44444445F, 0.6666667F, -0.22222222F, 0.44444445F, 0.8888889F, -0.22222222F, 0.44444445F, 
/*  319 */         -0.8888889F, 0.0F, 0.44444445F, -0.6666667F, 0.0F, 0.44444445F, -0.44444445F, 0.0F, 0.44444445F, 
/*  320 */         -0.22222222F, 0.0F, 0.44444445F, 0.0F, 0.0F, 0.44444445F, 0.22222222F, 0.0F, 0.44444445F, 
/*  321 */         0.44444445F, 0.0F, 0.44444445F, 0.6666667F, 0.0F, 0.44444445F, 0.8888889F, 0.0F, 0.44444445F, 
/*  322 */         -0.8888889F, 0.22222222F, 0.44444445F, -0.6666667F, 0.22222222F, 0.44444445F, -0.44444445F, 0.22222222F, 0.44444445F, 
/*  323 */         -0.22222222F, 0.22222222F, 0.44444445F, 0.0F, 0.22222222F, 0.44444445F, 0.22222222F, 0.22222222F, 0.44444445F, 
/*  324 */         0.44444445F, 0.22222222F, 0.44444445F, 0.6666667F, 0.22222222F, 0.44444445F, 0.8888889F, 0.22222222F, 0.44444445F, 
/*  325 */         -0.8888889F, 0.44444445F, 0.44444445F, -0.6666667F, 0.44444445F, 0.44444445F, -0.44444445F, 0.44444445F, 0.44444445F, 
/*  326 */         -0.22222222F, 0.44444445F, 0.44444445F, 0.0F, 0.44444445F, 0.44444445F, 0.22222222F, 0.44444445F, 0.44444445F, 
/*  327 */         0.44444445F, 0.44444445F, 0.44444445F, 0.6666667F, 0.44444445F, 0.44444445F, 0.8888889F, 0.44444445F, 0.44444445F, 
/*  328 */         -0.8888889F, 0.6666667F, 0.44444445F, -0.6666667F, 0.6666667F, 0.44444445F, -0.44444445F, 0.6666667F, 0.44444445F, 
/*  329 */         -0.22222222F, 0.6666667F, 0.44444445F, 0.0F, 0.6666667F, 0.44444445F, 0.22222222F, 0.6666667F, 0.44444445F, 
/*  330 */         0.44444445F, 0.6666667F, 0.44444445F, 0.6666667F, 0.6666667F, 0.44444445F, 0.8888889F, 0.6666667F, 0.44444445F, 
/*  331 */         -0.8888889F, 0.8888889F, 0.44444445F, -0.6666667F, 0.8888889F, 0.44444445F, -0.44444445F, 0.8888889F, 0.44444445F, 
/*  332 */         -0.22222222F, 0.8888889F, 0.44444445F, 0.0F, 0.8888889F, 0.44444445F, 0.22222222F, 0.8888889F, 0.44444445F, 
/*  333 */         0.44444445F, 0.8888889F, 0.44444445F, 0.6666667F, 0.8888889F, 0.44444445F, 0.8888889F, 0.8888889F, 0.44444445F, 
/*  334 */         -0.8888889F, -0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.6666667F, 
/*  335 */         -0.22222222F, -0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.6666667F, 
/*  336 */         0.44444445F, -0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.6666667F, 
/*  337 */         -0.8888889F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, 0.6666667F, -0.44444445F, -0.6666667F, 0.6666667F, 
/*  338 */         -0.22222222F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.22222222F, -0.6666667F, 0.6666667F, 
/*  339 */         0.44444445F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, 0.8888889F, -0.6666667F, 0.6666667F, 
/*  340 */         -0.8888889F, -0.44444445F, 0.6666667F, -0.6666667F, -0.44444445F, 0.6666667F, -0.44444445F, -0.44444445F, 0.6666667F, 
/*  341 */         -0.22222222F, -0.44444445F, 0.6666667F, 0.0F, -0.44444445F, 0.6666667F, 0.22222222F, -0.44444445F, 0.6666667F, 
/*  342 */         0.44444445F, -0.44444445F, 0.6666667F, 0.6666667F, -0.44444445F, 0.6666667F, 0.8888889F, -0.44444445F, 0.6666667F, 
/*  343 */         -0.8888889F, -0.22222222F, 0.6666667F, -0.6666667F, -0.22222222F, 0.6666667F, -0.44444445F, -0.22222222F, 0.6666667F, 
/*  344 */         -0.22222222F, -0.22222222F, 0.6666667F, 0.0F, -0.22222222F, 0.6666667F, 0.22222222F, -0.22222222F, 0.6666667F, 
/*  345 */         0.44444445F, -0.22222222F, 0.6666667F, 0.6666667F, -0.22222222F, 0.6666667F, 0.8888889F, -0.22222222F, 0.6666667F, 
/*  346 */         -0.8888889F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.44444445F, 0.0F, 0.6666667F, 
/*  347 */         -0.22222222F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.22222222F, 0.0F, 0.6666667F, 
/*  348 */         0.44444445F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.8888889F, 0.0F, 0.6666667F, 
/*  349 */         -0.8888889F, 0.22222222F, 0.6666667F, -0.6666667F, 0.22222222F, 0.6666667F, -0.44444445F, 0.22222222F, 0.6666667F, 
/*  350 */         -0.22222222F, 0.22222222F, 0.6666667F, 0.0F, 0.22222222F, 0.6666667F, 0.22222222F, 0.22222222F, 0.6666667F, 
/*  351 */         0.44444445F, 0.22222222F, 0.6666667F, 0.6666667F, 0.22222222F, 0.6666667F, 0.8888889F, 0.22222222F, 0.6666667F, 
/*  352 */         -0.8888889F, 0.44444445F, 0.6666667F, -0.6666667F, 0.44444445F, 0.6666667F, -0.44444445F, 0.44444445F, 0.6666667F, 
/*  353 */         -0.22222222F, 0.44444445F, 0.6666667F, 0.0F, 0.44444445F, 0.6666667F, 0.22222222F, 0.44444445F, 0.6666667F, 
/*  354 */         0.44444445F, 0.44444445F, 0.6666667F, 0.6666667F, 0.44444445F, 0.6666667F, 0.8888889F, 0.44444445F, 0.6666667F, 
/*  355 */         -0.8888889F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.44444445F, 0.6666667F, 0.6666667F, 
/*  356 */         -0.22222222F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.22222222F, 0.6666667F, 0.6666667F, 
/*  357 */         0.44444445F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.8888889F, 0.6666667F, 0.6666667F, 
/*  358 */         -0.8888889F, 0.8888889F, 0.6666667F, -0.6666667F, 0.8888889F, 0.6666667F, -0.44444445F, 0.8888889F, 0.6666667F, 
/*  359 */         -0.22222222F, 0.8888889F, 0.6666667F, 0.0F, 0.8888889F, 0.6666667F, 0.22222222F, 0.8888889F, 0.6666667F, 
/*  360 */         0.44444445F, 0.8888889F, 0.6666667F, 0.6666667F, 0.8888889F, 0.6666667F, 0.8888889F, 0.8888889F, 0.6666667F, 
/*  361 */         -0.8888889F, -0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, 0.8888889F, 
/*  362 */         -0.22222222F, -0.8888889F, 0.8888889F, 0.0F, -0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, 0.8888889F, 
/*  363 */         0.44444445F, -0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, 0.8888889F, 0.8888889F, -0.8888889F, 0.8888889F, 
/*  364 */         -0.8888889F, -0.6666667F, 0.8888889F, -0.6666667F, -0.6666667F, 0.8888889F, -0.44444445F, -0.6666667F, 0.8888889F, 
/*  365 */         -0.22222222F, -0.6666667F, 0.8888889F, 0.0F, -0.6666667F, 0.8888889F, 0.22222222F, -0.6666667F, 0.8888889F, 
/*  366 */         0.44444445F, -0.6666667F, 0.8888889F, 0.6666667F, -0.6666667F, 0.8888889F, 0.8888889F, -0.6666667F, 0.8888889F, 
/*  367 */         -0.8888889F, -0.44444445F, 0.8888889F, -0.6666667F, -0.44444445F, 0.8888889F, -0.44444445F, -0.44444445F, 0.8888889F, 
/*  368 */         -0.22222222F, -0.44444445F, 0.8888889F, 0.0F, -0.44444445F, 0.8888889F, 0.22222222F, -0.44444445F, 0.8888889F, 
/*  369 */         0.44444445F, -0.44444445F, 0.8888889F, 0.6666667F, -0.44444445F, 0.8888889F, 0.8888889F, -0.44444445F, 0.8888889F, 
/*  370 */         -0.8888889F, -0.22222222F, 0.8888889F, -0.6666667F, -0.22222222F, 0.8888889F, -0.44444445F, -0.22222222F, 0.8888889F, 
/*  371 */         -0.22222222F, -0.22222222F, 0.8888889F, 0.0F, -0.22222222F, 0.8888889F, 0.22222222F, -0.22222222F, 0.8888889F, 
/*  372 */         0.44444445F, -0.22222222F, 0.8888889F, 0.6666667F, -0.22222222F, 0.8888889F, 0.8888889F, -0.22222222F, 0.8888889F, 
/*  373 */         -0.8888889F, 0.0F, 0.8888889F, -0.6666667F, 0.0F, 0.8888889F, -0.44444445F, 0.0F, 0.8888889F, 
/*  374 */         -0.22222222F, 0.0F, 0.8888889F, 0.0F, 0.0F, 0.8888889F, 0.22222222F, 0.0F, 0.8888889F, 
/*  375 */         0.44444445F, 0.0F, 0.8888889F, 0.6666667F, 0.0F, 0.8888889F, 0.8888889F, 0.0F, 0.8888889F, 
/*  376 */         -0.8888889F, 0.22222222F, 0.8888889F, -0.6666667F, 0.22222222F, 0.8888889F, -0.44444445F, 0.22222222F, 0.8888889F, 
/*  377 */         -0.22222222F, 0.22222222F, 0.8888889F, 0.0F, 0.22222222F, 0.8888889F, 0.22222222F, 0.22222222F, 0.8888889F, 
/*  378 */         0.44444445F, 0.22222222F, 0.8888889F, 0.6666667F, 0.22222222F, 0.8888889F, 0.8888889F, 0.22222222F, 0.8888889F, 
/*  379 */         -0.8888889F, 0.44444445F, 0.8888889F, -0.6666667F, 0.44444445F, 0.8888889F, -0.44444445F, 0.44444445F, 0.8888889F, 
/*  380 */         -0.22222222F, 0.44444445F, 0.8888889F, 0.0F, 0.44444445F, 0.8888889F, 0.22222222F, 0.44444445F, 0.8888889F, 
/*  381 */         0.44444445F, 0.44444445F, 0.8888889F, 0.6666667F, 0.44444445F, 0.8888889F, 0.8888889F, 0.44444445F, 0.8888889F, 
/*  382 */         -0.8888889F, 0.6666667F, 0.8888889F, -0.6666667F, 0.6666667F, 0.8888889F, -0.44444445F, 0.6666667F, 0.8888889F, 
/*  383 */         -0.22222222F, 0.6666667F, 0.8888889F, 0.0F, 0.6666667F, 0.8888889F, 0.22222222F, 0.6666667F, 0.8888889F, 
/*  384 */         0.44444445F, 0.6666667F, 0.8888889F, 0.6666667F, 0.6666667F, 0.8888889F, 0.8888889F, 0.6666667F, 0.8888889F, 
/*  385 */         -0.8888889F, 0.8888889F, 0.8888889F, -0.6666667F, 0.8888889F, 0.8888889F, -0.44444445F, 0.8888889F, 0.8888889F, 
/*  386 */         -0.22222222F, 0.8888889F, 0.8888889F, 0.0F, 0.8888889F, 0.8888889F, 0.22222222F, 0.8888889F, 0.8888889F, 
/*  387 */         0.44444445F, 0.8888889F, 0.8888889F, 0.6666667F, 0.8888889F, 0.8888889F, 0.8888889F, 0.8888889F, 0.8888889F };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  395 */     public static final int[] table_ab1_codelength = new int[] { 0, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
/*      */ 
/*      */ 
/*      */     
/*  399 */     public static final float[][] table_ab1_groupingtables = new float[][] { null, grouping_5bits };
/*      */ 
/*      */ 
/*      */     
/*  403 */     public static final float[] table_ab1_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 
/*  404 */         0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 
/*  405 */         2.4414062E-4F, 1.2207031E-4F, 6.1035156E-5F, 3.0517578E-5F };
/*      */ 
/*      */ 
/*      */     
/*  409 */     public static final float[] table_ab1_c = new float[] { 0.0F, 1.3333334F, 1.1428572F, 1.0666667F, 1.032258F, 
/*  410 */         1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 1.0009775F, 
/*  411 */         1.0004885F, 1.0002443F, 1.0001221F, 1.000061F, 1.0000305F, 
/*  412 */         1.0000153F };
/*      */ 
/*      */ 
/*      */     
/*  416 */     public static final float[] table_ab1_d = new float[] { 0.0F, 0.5F, 0.25F, 0.125F, 0.0625F, 
/*  417 */         0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 
/*  418 */         9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.103516E-5F, 
/*  419 */         3.051758E-5F };
/*      */ 
/*      */ 
/*      */     
/*  423 */     public static final float[][] table_ab234_groupingtables = new float[][] { null, grouping_5bits, grouping_7bits, grouping_10bits };
/*      */ 
/*      */ 
/*      */     
/*  427 */     public static final int[] table_ab2_codelength = new int[] { 0, 5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16 };
/*      */     
/*  429 */     public static final float[] table_ab2_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.25F, 0.125F, 0.125F, 0.0625F, 
/*  430 */         0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 
/*  431 */         9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 3.0517578E-5F };
/*      */     
/*  433 */     public static final float[] table_ab2_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.1428572F, 1.7777778F, 
/*  434 */         1.0666667F, 1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 
/*  435 */         1.0019569F, 1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 
/*  436 */         1.0000153F };
/*      */     
/*  438 */     public static final float[] table_ab2_d = new float[] { 0.0F, 0.5F, 0.5F, 0.25F, 0.5F, 
/*  439 */         0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 
/*  440 */         0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 
/*  441 */         3.051758E-5F };
/*      */ 
/*      */     
/*  444 */     public static final int[] table_ab3_codelength = new int[] { 0, 5, 7, 3, 10, 4, 5, 16 };
/*      */     
/*  446 */     public static final float[] table_ab3_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.25F, 0.125F, 0.125F, 0.0625F, 3.0517578E-5F };
/*      */     
/*  448 */     public static final float[] table_ab3_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.1428572F, 1.7777778F, 
/*  449 */         1.0666667F, 1.032258F, 1.0000153F };
/*      */     
/*  451 */     public static final float[] table_ab3_d = new float[] { 0.0F, 0.5F, 0.5F, 0.25F, 0.5F, 
/*  452 */         0.125F, 0.0625F, 3.051758E-5F };
/*      */ 
/*      */     
/*  455 */     public static final int[] table_ab4_codelength = new int[] { 0, 5, 7, 16 };
/*  456 */     public static final float[] table_ab4_factor = new float[] { 0.0F, 0.5F, 0.25F, 3.0517578E-5F };
/*  457 */     public static final float[] table_ab4_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.0000153F };
/*  458 */     public static final float[] table_ab4_d = new float[] { 0.0F, 0.5F, 0.5F, 3.051758E-5F };
/*      */ 
/*      */ 
/*      */     
/*  462 */     public static final int[] table_cd_codelength = new int[] { 0, 5, 7, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
/*      */     
/*  464 */     public static final float[][] table_cd_groupingtables = new float[][] { null, grouping_5bits, grouping_7bits, grouping_10bits };
/*      */     
/*  466 */     public static final float[] table_cd_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.125F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 
/*  467 */         0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 
/*  468 */         1.2207031E-4F, 6.1035156E-5F };
/*      */     
/*  470 */     public static final float[] table_cd_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.7777778F, 1.0666667F, 
/*  471 */         1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 
/*  472 */         1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 1.000061F, 
/*  473 */         1.0000305F };
/*      */     
/*  475 */     public static final float[] table_cd_d = new float[] { 0.0F, 0.5F, 0.5F, 0.5F, 0.125F, 
/*  476 */         0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 
/*  477 */         0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 
/*  478 */         6.103516E-5F };
/*      */     
/*      */     protected int subbandnumber;
/*      */     protected int allocation;
/*      */     protected int scfsi;
/*      */     protected float scalefactor1;
/*      */     protected float scalefactor2;
/*      */     protected float scalefactor3;
/*  486 */     protected int[] codelength = new int[1];
/*  487 */     protected float[][] groupingtable = new float[2][];
/*      */     
/*  489 */     protected float[] factor = new float[] { 0.0F };
/*      */     protected int groupnumber;
/*      */     protected int samplenumber;
/*  492 */     protected float[] samples = new float[3];
/*  493 */     protected float[] c = new float[] { 0.0F };
/*  494 */     protected float[] d = new float[] { 0.0F };
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public SubbandLayer2(int subbandnumber) {
/*  500 */       this.subbandnumber = subbandnumber;
/*  501 */       this.groupnumber = this.samplenumber = 0;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     protected int get_allocationlength(Header header) {
/*  510 */       if (header.version() == 1) {
/*      */         
/*  512 */         int channel_bitrate = header.bitrate_index();
/*      */ 
/*      */         
/*  515 */         if (header.mode() != 3)
/*  516 */           if (channel_bitrate == 4) {
/*  517 */             channel_bitrate = 1;
/*      */           } else {
/*  519 */             channel_bitrate -= 4;
/*      */           }  
/*  521 */         if (channel_bitrate == 1 || channel_bitrate == 2) {
/*      */           
/*  523 */           if (this.subbandnumber <= 1) {
/*  524 */             return 4;
/*      */           }
/*  526 */           return 3;
/*      */         } 
/*      */         
/*  529 */         if (this.subbandnumber <= 10)
/*  530 */           return 4; 
/*  531 */         if (this.subbandnumber <= 22) {
/*  532 */           return 3;
/*      */         }
/*  534 */         return 2;
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  540 */       if (this.subbandnumber <= 3)
/*  541 */         return 4; 
/*  542 */       if (this.subbandnumber <= 10) {
/*  543 */         return 3;
/*      */       }
/*  545 */       return 2;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     protected void prepare_sample_reading(Header header, int allocation, int channel, float[] factor, int[] codelength, float[] c, float[] d) {
/*  558 */       int channel_bitrate = header.bitrate_index();
/*      */       
/*  560 */       if (header.mode() != 3)
/*  561 */         if (channel_bitrate == 4) {
/*  562 */           channel_bitrate = 1;
/*      */         } else {
/*  564 */           channel_bitrate -= 4;
/*      */         }  
/*  566 */       if (channel_bitrate == 1 || channel_bitrate == 2) {
/*      */ 
/*      */         
/*  569 */         this.groupingtable[channel] = table_cd_groupingtables[allocation];
/*  570 */         factor[0] = table_cd_factor[allocation];
/*  571 */         codelength[0] = table_cd_codelength[allocation];
/*  572 */         c[0] = table_cd_c[allocation];
/*  573 */         d[0] = table_cd_d[allocation];
/*      */ 
/*      */ 
/*      */       
/*      */       }
/*  578 */       else if (this.subbandnumber <= 2) {
/*      */         
/*  580 */         this.groupingtable[channel] = table_ab1_groupingtables[allocation];
/*  581 */         factor[0] = table_ab1_factor[allocation];
/*  582 */         codelength[0] = table_ab1_codelength[allocation];
/*  583 */         c[0] = table_ab1_c[allocation];
/*  584 */         d[0] = table_ab1_d[allocation];
/*      */       }
/*      */       else {
/*      */         
/*  588 */         this.groupingtable[channel] = table_ab234_groupingtables[allocation];
/*  589 */         if (this.subbandnumber <= 10) {
/*      */           
/*  591 */           factor[0] = table_ab2_factor[allocation];
/*  592 */           codelength[0] = table_ab2_codelength[allocation];
/*  593 */           c[0] = table_ab2_c[allocation];
/*  594 */           d[0] = table_ab2_d[allocation];
/*      */         }
/*  596 */         else if (this.subbandnumber <= 22) {
/*      */           
/*  598 */           factor[0] = table_ab3_factor[allocation];
/*  599 */           codelength[0] = table_ab3_codelength[allocation];
/*  600 */           c[0] = table_ab3_c[allocation];
/*  601 */           d[0] = table_ab3_d[allocation];
/*      */         }
/*      */         else {
/*      */           
/*  605 */           factor[0] = table_ab4_factor[allocation];
/*  606 */           codelength[0] = table_ab4_codelength[allocation];
/*  607 */           c[0] = table_ab4_c[allocation];
/*  608 */           d[0] = table_ab4_d[allocation];
/*      */         } 
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_allocation(Bitstream stream, Header header, Crc16 crc) {
/*  620 */       int length = get_allocationlength(header);
/*  621 */       this.allocation = stream.get_bits(length);
/*  622 */       if (crc != null) {
/*  623 */         crc.add_bits(this.allocation, length);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_scalefactor_selection(Bitstream stream, Crc16 crc) {
/*  631 */       if (this.allocation != 0) {
/*      */         
/*  633 */         this.scfsi = stream.get_bits(2);
/*  634 */         if (crc != null) crc.add_bits(this.scfsi, 2);
/*      */       
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_scalefactor(Bitstream stream, Header header) {
/*  643 */       if (this.allocation != 0) {
/*      */         
/*  645 */         switch (this.scfsi) {
/*      */           
/*      */           case 0:
/*  648 */             this.scalefactor1 = scalefactors[stream.get_bits(6)];
/*  649 */             this.scalefactor2 = scalefactors[stream.get_bits(6)];
/*  650 */             this.scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           case 1:
/*  653 */             this.scalefactor1 = this.scalefactor2 = scalefactors[stream.get_bits(6)];
/*  654 */             this.scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           case 2:
/*  657 */             this.scalefactor1 = this.scalefactor2 = this.scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           case 3:
/*  660 */             this.scalefactor1 = scalefactors[stream.get_bits(6)];
/*  661 */             this.scalefactor2 = this.scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */         } 
/*  664 */         prepare_sample_reading(header, this.allocation, 0, 
/*  665 */             this.factor, this.codelength, this.c, this.d);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean read_sampledata(Bitstream stream) {
/*  674 */       if (this.allocation != 0) {
/*  675 */         if (this.groupingtable[0] != null) {
/*      */           
/*  677 */           int samplecode = stream.get_bits(this.codelength[0]);
/*      */           
/*  679 */           samplecode += samplecode << 1;
/*  680 */           float[] target = this.samples;
/*  681 */           float[] source = this.groupingtable[0];
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  692 */           int tmp = 0;
/*  693 */           int temp = samplecode;
/*      */           
/*  695 */           if (temp > source.length - 3) temp = source.length - 3;
/*      */           
/*  697 */           target[tmp] = source[temp];
/*  698 */           temp++; tmp++;
/*  699 */           target[tmp] = source[temp];
/*  700 */           temp++; tmp++;
/*  701 */           target[tmp] = source[temp];
/*      */         
/*      */         }
/*      */         else {
/*      */ 
/*      */           
/*  707 */           this.samples[0] = (float)((stream.get_bits(this.codelength[0]) * this.factor[0]) - 1.0D);
/*  708 */           this.samples[1] = (float)((stream.get_bits(this.codelength[0]) * this.factor[0]) - 1.0D);
/*  709 */           this.samples[2] = (float)((stream.get_bits(this.codelength[0]) * this.factor[0]) - 1.0D);
/*      */         } 
/*      */       }
/*  712 */       this.samplenumber = 0;
/*  713 */       if (++this.groupnumber == 12) {
/*  714 */         return true;
/*      */       }
/*  716 */       return false;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2) {
/*  724 */       if (this.allocation != 0 && channels != 2) {
/*      */         
/*  726 */         float sample = this.samples[this.samplenumber];
/*      */         
/*  728 */         if (this.groupingtable[0] == null)
/*  729 */           sample = (sample + this.d[0]) * this.c[0]; 
/*  730 */         if (this.groupnumber <= 4) {
/*  731 */           sample *= this.scalefactor1;
/*  732 */         } else if (this.groupnumber <= 8) {
/*  733 */           sample *= this.scalefactor2;
/*      */         } else {
/*  735 */           sample *= this.scalefactor3;
/*  736 */         }  filter1.input_sample(sample, this.subbandnumber);
/*      */       } 
/*      */       
/*  739 */       if (++this.samplenumber == 3) {
/*  740 */         return true;
/*      */       }
/*  742 */       return false;
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*      */   static class SubbandLayer2IntensityStereo
/*      */     extends SubbandLayer2
/*      */   {
/*      */     protected int channel2_scfsi;
/*      */     
/*      */     protected float channel2_scalefactor1;
/*      */     
/*      */     protected float channel2_scalefactor2;
/*      */     
/*      */     protected float channel2_scalefactor3;
/*      */     
/*      */     public SubbandLayer2IntensityStereo(int subbandnumber) {
/*  759 */       super(subbandnumber);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_allocation(Bitstream stream, Header header, Crc16 crc) {
/*  767 */       super.read_allocation(stream, header, crc);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_scalefactor_selection(Bitstream stream, Crc16 crc) {
/*  775 */       if (this.allocation != 0) {
/*      */         
/*  777 */         this.scfsi = stream.get_bits(2);
/*  778 */         this.channel2_scfsi = stream.get_bits(2);
/*  779 */         if (crc != null) {
/*      */           
/*  781 */           crc.add_bits(this.scfsi, 2);
/*  782 */           crc.add_bits(this.channel2_scfsi, 2);
/*      */         } 
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_scalefactor(Bitstream stream, Header header) {
/*  792 */       if (this.allocation != 0) {
/*      */         
/*  794 */         super.read_scalefactor(stream, header);
/*  795 */         switch (this.channel2_scfsi) {
/*      */           
/*      */           case 0:
/*  798 */             this.channel2_scalefactor1 = scalefactors[stream.get_bits(6)];
/*  799 */             this.channel2_scalefactor2 = scalefactors[stream.get_bits(6)];
/*  800 */             this.channel2_scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           
/*      */           case 1:
/*  804 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = scalefactors[stream.get_bits(6)];
/*  805 */             this.channel2_scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           
/*      */           case 2:
/*  809 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = 
/*  810 */               this.channel2_scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           
/*      */           case 3:
/*  814 */             this.channel2_scalefactor1 = scalefactors[stream.get_bits(6)];
/*  815 */             this.channel2_scalefactor2 = this.channel2_scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */         } 
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean read_sampledata(Bitstream stream) {
/*  827 */       return super.read_sampledata(stream);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2) {
/*  835 */       if (this.allocation != 0) {
/*      */         
/*  837 */         float sample = this.samples[this.samplenumber];
/*      */         
/*  839 */         if (this.groupingtable[0] == null)
/*  840 */           sample = (sample + this.d[0]) * this.c[0]; 
/*  841 */         if (channels == 0) {
/*      */           
/*  843 */           float sample2 = sample;
/*  844 */           if (this.groupnumber <= 4) {
/*      */             
/*  846 */             sample *= this.scalefactor1;
/*  847 */             sample2 *= this.channel2_scalefactor1;
/*      */           }
/*  849 */           else if (this.groupnumber <= 8) {
/*      */             
/*  851 */             sample *= this.scalefactor2;
/*  852 */             sample2 *= this.channel2_scalefactor2;
/*      */           }
/*      */           else {
/*      */             
/*  856 */             sample *= this.scalefactor3;
/*  857 */             sample2 *= this.channel2_scalefactor3;
/*      */           } 
/*  859 */           filter1.input_sample(sample, this.subbandnumber);
/*  860 */           filter2.input_sample(sample2, this.subbandnumber);
/*      */         }
/*  862 */         else if (channels == 1) {
/*      */           
/*  864 */           if (this.groupnumber <= 4) {
/*  865 */             sample *= this.scalefactor1;
/*  866 */           } else if (this.groupnumber <= 8) {
/*  867 */             sample *= this.scalefactor2;
/*      */           } else {
/*  869 */             sample *= this.scalefactor3;
/*  870 */           }  filter1.input_sample(sample, this.subbandnumber);
/*      */         }
/*      */         else {
/*      */           
/*  874 */           if (this.groupnumber <= 4) {
/*  875 */             sample *= this.channel2_scalefactor1;
/*  876 */           } else if (this.groupnumber <= 8) {
/*  877 */             sample *= this.channel2_scalefactor2;
/*      */           } else {
/*  879 */             sample *= this.channel2_scalefactor3;
/*  880 */           }  filter1.input_sample(sample, this.subbandnumber);
/*      */         } 
/*      */       } 
/*      */       
/*  884 */       if (++this.samplenumber == 3) {
/*  885 */         return true;
/*      */       }
/*  887 */       return false;
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*      */   static class SubbandLayer2Stereo
/*      */     extends SubbandLayer2
/*      */   {
/*      */     protected int channel2_allocation;
/*      */     protected int channel2_scfsi;
/*      */     protected float channel2_scalefactor1;
/*      */     protected float channel2_scalefactor2;
/*      */     protected float channel2_scalefactor3;
/*  900 */     protected int[] channel2_codelength = new int[1];
/*      */     
/*  902 */     protected float[] channel2_factor = new float[] { 0.0F };
/*      */     protected float[] channel2_samples;
/*  904 */     protected float[] channel2_c = new float[] { 0.0F };
/*  905 */     protected float[] channel2_d = new float[] { 0.0F };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public SubbandLayer2Stereo(int subbandnumber) {
/*  912 */       super(subbandnumber);
/*  913 */       this.channel2_samples = new float[3];
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_allocation(Bitstream stream, Header header, Crc16 crc) {
/*  921 */       int length = get_allocationlength(header);
/*  922 */       this.allocation = stream.get_bits(length);
/*  923 */       this.channel2_allocation = stream.get_bits(length);
/*  924 */       if (crc != null) {
/*      */         
/*  926 */         crc.add_bits(this.allocation, length);
/*  927 */         crc.add_bits(this.channel2_allocation, length);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_scalefactor_selection(Bitstream stream, Crc16 crc) {
/*  936 */       if (this.allocation != 0) {
/*      */         
/*  938 */         this.scfsi = stream.get_bits(2);
/*  939 */         if (crc != null)
/*  940 */           crc.add_bits(this.scfsi, 2); 
/*      */       } 
/*  942 */       if (this.channel2_allocation != 0) {
/*      */         
/*  944 */         this.channel2_scfsi = stream.get_bits(2);
/*  945 */         if (crc != null) {
/*  946 */           crc.add_bits(this.channel2_scfsi, 2);
/*      */         }
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void read_scalefactor(Bitstream stream, Header header) {
/*  955 */       super.read_scalefactor(stream, header);
/*  956 */       if (this.channel2_allocation != 0) {
/*      */         
/*  958 */         switch (this.channel2_scfsi) {
/*      */           
/*      */           case 0:
/*  961 */             this.channel2_scalefactor1 = scalefactors[stream.get_bits(6)];
/*  962 */             this.channel2_scalefactor2 = scalefactors[stream.get_bits(6)];
/*  963 */             this.channel2_scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           
/*      */           case 1:
/*  967 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = 
/*  968 */               scalefactors[stream.get_bits(6)];
/*  969 */             this.channel2_scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           
/*      */           case 2:
/*  973 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = 
/*  974 */               this.channel2_scalefactor3 = scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */           
/*      */           case 3:
/*  978 */             this.channel2_scalefactor1 = scalefactors[stream.get_bits(6)];
/*  979 */             this.channel2_scalefactor2 = this.channel2_scalefactor3 = 
/*  980 */               scalefactors[stream.get_bits(6)];
/*      */             break;
/*      */         } 
/*  983 */         prepare_sample_reading(header, this.channel2_allocation, 1, 
/*  984 */             this.channel2_factor, this.channel2_codelength, this.channel2_c, 
/*  985 */             this.channel2_d);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean read_sampledata(Bitstream stream) {
/*  994 */       boolean returnvalue = super.read_sampledata(stream);
/*      */       
/*  996 */       if (this.channel2_allocation != 0)
/*  997 */         if (this.groupingtable[1] != null) {
/*      */           
/*  999 */           int samplecode = stream.get_bits(this.channel2_codelength[0]);
/*      */           
/* 1001 */           samplecode += samplecode << 1;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1014 */           float[] target = this.channel2_samples;
/* 1015 */           float[] source = this.groupingtable[1];
/* 1016 */           int tmp = 0;
/* 1017 */           int temp = samplecode;
/* 1018 */           target[tmp] = source[temp];
/* 1019 */           temp++; tmp++;
/* 1020 */           target[tmp] = source[temp];
/* 1021 */           temp++; tmp++;
/* 1022 */           target[tmp] = source[temp];
/*      */         
/*      */         }
/*      */         else {
/*      */           
/* 1027 */           this.channel2_samples[0] = 
/* 1028 */             (float)((stream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0]) - 1.0D);
/* 1029 */           this.channel2_samples[1] = 
/* 1030 */             (float)((stream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0]) - 1.0D);
/* 1031 */           this.channel2_samples[2] = 
/* 1032 */             (float)((stream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0]) - 1.0D);
/*      */         }  
/* 1034 */       return returnvalue;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2) {
/* 1042 */       boolean returnvalue = super.put_next_sample(channels, filter1, filter2);
/* 1043 */       if (this.channel2_allocation != 0 && channels != 1) {
/*      */         
/* 1045 */         float sample = this.channel2_samples[this.samplenumber - 1];
/*      */         
/* 1047 */         if (this.groupingtable[1] == null) {
/* 1048 */           sample = (sample + this.channel2_d[0]) * this.channel2_c[0];
/*      */         }
/* 1050 */         if (this.groupnumber <= 4) {
/* 1051 */           sample *= this.channel2_scalefactor1;
/* 1052 */         } else if (this.groupnumber <= 8) {
/* 1053 */           sample *= this.channel2_scalefactor2;
/*      */         } else {
/* 1055 */           sample *= this.channel2_scalefactor3;
/* 1056 */         }  if (channels == 0) {
/* 1057 */           filter2.input_sample(sample, this.subbandnumber);
/*      */         } else {
/* 1059 */           filter1.input_sample(sample, this.subbandnumber);
/*      */         } 
/* 1061 */       }  return returnvalue;
/*      */     }
/*      */   }
/*      */ }


/* Location:              C:\Users\emlin\Desktop\BetterCraft.jar!\javazoom\jl\decoder\LayerIIDecoder.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */